import 'package:flutter/material.dart';
import 'package:flutter_quill/flutter_quill.dart' as Quill;
import 'dart:io';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(MaterialApp(home: MyForm()));
}

class MyForm extends StatefulWidget {
  @override
  State<StatefulWidget> createState() {
    return MyFormState();
  }
}

class MyFormState extends State<MyForm> {
  final _myFormkey = GlobalKey<FormState>();
  String? _selectedGender;
  final List<String> _genderOptions = ['Male', 'Female', 'Prefer not to mention'];
  List<String> _hobbies = [];

  late SharedPreferences _prefs; // SharedPreferences instance
  
  
  late Quill.QuillController _controller;
  

  @override
  void initState() {
    super.initState();
    _controller = Quill.QuillController.basic(); // initializing controller
    _loadData(); // loading data from SharedPreferences
  }

  // Loads the data from SharedPreferences
  void _loadData() async {
    _prefs = await SharedPreferences.getInstance();
    setState(() {
      // Set the form data from SharedPreferences
      _selectedGender = _prefs.getString('gender');
      _hobbies = _prefs.getStringList('hobbies') ?? [];
    });
  }

  // Saves the form data to SharedPreferences
  void _saveArticle(String article) async {
    await _prefs.setString('article', article);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
          resizeToAvoidBottomInset : false,
          appBar: AppBar(
        title: const Text("Profile Page."),
      ),
      body: SingleChildScrollView(
         child: ConstrainedBox(
        
        
        constraints: BoxConstraints(),
        child: Container(
          
          height: 860,
          
          child: Form(
            key: _myFormkey,
            child: Column(
              children: <Widget>[
                Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: TextFormField(
                    validator: (String? msg) {
                      if (msg == null || msg.isEmpty) {
                        return "please enter the name";
                      }
                      if (msg.length < 3) {
                        return "Name is less than 3 characters";
                      }
                      return null;
                    },
                    decoration: InputDecoration(
                        labelText: "Name",
                        hintText: "Enter your name",
                        
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10.0))),
                  ),
                ),

                                Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: TextFormField(
                    keyboardType: TextInputType.phone,
                    validator: (String? msg) {
                      if (msg == null || msg.isEmpty) {
                        return "please enter your mobile number";
                      }
                      if (msg.length < 10) {
                        return "Not a valid number";
                      }
                      return null;
                    },
                    decoration: InputDecoration(
                        labelText: "Mobile number",
                        hintText: "Enter your mobile number",
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10.0))),
                  ),
                ),
                
              Padding(
                padding: const EdgeInsets.all(10.0),
                child: TextFormField(
                  validator: (String? msg) {
                    if (msg == null || msg.isEmpty) {
                      return "please enter your age";
                    }
                    if (9 < msg.length) {
                      return "Not  valid ";
                    }
                    return null;
                  },
                
                  decoration: InputDecoration(
                      labelText: "Age",
                      hintText: "Enter your Age",
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0))),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(10.0),
                child: TextFormField(
                  validator: (String? msg) {
                    if (msg == null || msg.isEmpty) {
                      return "please enter your country";
                    }
                    return null;
                  },
                  
                  decoration: InputDecoration(
                      labelText: "Country",
                      hintText: "Enter your country",
                      border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0))),
                ),
              ),
              // Inside your build method or widget tree
              Padding(
                padding: EdgeInsets.all(10.0),
                child: DropdownButtonFormField(
                  value: _selectedGender,
                  items: _genderOptions.map((gender) {
                    return DropdownMenuItem(
                      value: gender,
                      child: Text(gender),
                    );
                  }).toList(),
                  decoration: InputDecoration(
                    labelText: "Gender",
                    hintText: "Select your gender",
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10.0),
                    ),
                  ),
                  onChanged: (value) {
                   
setState(() {
_selectedGender = value as String?;
});
},
validator: (value) {
if (_selectedGender == null || _selectedGender == '') {
return 'Please select your gender';
}
return null;
},
),
),
Padding(
  padding: const EdgeInsets.all(10.0),
  child: TextFormField(
    validator: (String? msg) {
      if (msg == null || msg.isEmpty) {
        return "please enter a hobby";
      }
      return null;
    },
    decoration: InputDecoration(
        labelText: "Hobby 1",
        hintText: "Enter your hobby",
        border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10.0))),
  ),
),
Padding(
  padding: const EdgeInsets.all(10.0),
  child: TextFormField(
    validator: (String? msg) {
      if (msg == null || msg.isEmpty) {
        return "please enter a hobby";
      }
      return null;
    },
    decoration: InputDecoration(
        labelText: "Hobby 2",
        hintText: "Enter your hobby",
        border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10.0))),
  ),
),
Padding(
  padding: const EdgeInsets.all(10.0),
  child: TextFormField(
    validator: (String? msg) {
      if (msg == null || msg.isEmpty) {
        return "please enter a hobby";
      }
      return null;
    },
    decoration: InputDecoration(
        labelText: "Hobby 3",
        hintText: "Enter your hobby",
        border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10.0))),
  ),
),
                Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: TextFormField(
                    validator: (String? msg) {
                      if (msg == null || msg.isEmpty) {
                        return "please write something";
                      }
                      if (msg.length < 5) {
                        return "it is less than 5 characters";
                      }
                      return null;
                    },
                    decoration: InputDecoration(
                        labelText: "Article",
                        hintText: "Please write something",
                        border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10.0))),
                  ),
                ),



                Quill.QuillToolbar.basic(
                  controller: _controller,
                  showLink: false,
                  showListCheck: true,
                ),




                Quill.QuillEditor(
                  controller: _controller,
                  readOnly: true,
                  scrollable: true,
                  autoFocus: true,
                  expands: false,
                  padding: EdgeInsets.zero,
                  focusNode: FocusNode(),
                  scrollController: ScrollController(),
                ),

                // SizedBox(child: 20),


               Expanded(
                  child: Align(
                    alignment: Alignment.bottomCenter,
                    child: ElevatedButton(
                      onPressed: () {
                        if (_myFormkey.currentState!.validate()) {
                          String article = _controller.document.toPlainText();
                          _saveArticle(article);
                          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                            content: Text('Article submitted!'),
                          ));
                        }
                      },   child: Text('Submit'),
                 
                ),
                  )
               )
              ],
            ),
          ),
        ),
      ),
      ),
    );
  }
}







